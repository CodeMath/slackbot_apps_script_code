{"files":[{"id":"25a84725-9fc2-492b-aa7f-dba6ffc900ba","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Asia/Seoul\",\n  \"dependencies\": {},\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\",\n  \"webapp\": {\n    \"executeAs\": \"USER_DEPLOYING\",\n    \"access\": \"MYSELF\"\n  }\n}"},{"id":"e0a10493-e51d-4dbc-8a3b-10c0962c4636","name":"Code","type":"server_js","source":"/**\n * @function generateUUID\n * @returns {string}\n * @description callback_id 생성을 위한 - UUID 생성기\n */\nfunction generateUUID() {\n  return \u0027xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\u0027.replace(/[xy]/g, function(c) {\n    var r \u003d Math.random() * 16 | 0,\n        v \u003d c \u003d\u003d\u003d \u0027x\u0027 ? r : (r \u0026 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n///////////////////////////////////////////////////////////////////////////////////\n\n// var json \u003d JSON.parse(response); \n\n///////////////////////////////////////////////////////////////////////////////////\n\n\n/**\n * @function slackHookMessage\n * @param {string} url - response_url (Hook)\n * @param {Object} text - 변경할 텍스트\n * @description Response URL 있는 경우만 가능합니다.\n */\nfunction slackHookMessage(url, text){\n\n  var options \u003d {\n    \"method\": \"post\",\n    \"headers\": {\n      \"Content-Type\": \"application/json;charset\u003dutf-8\"\n    },\n    \"payload\": JSON.stringify({\"text\": text})\n  };\n  options.muteHttpExceptions \u003d true;\n  UrlFetchApp.fetch(url, options);\n\n}\n\n\n/**\n * @function slackApiRequest\n * @param {string} url\n * @param {Object} payload\n * @param {string} slack_token \n * @description Slack API 호출을 위한 함수\n */\nfunction slackApiRequest(url, payload, slack_token) {\n  var options \u003d {\n    \"method\": \"post\",\n    \"headers\": {\n      \"Authorization\": \"Bearer \" + slack_token,\n      \"Content-Type\": \"application/json;charset\u003dutf-8\"\n    },\n    \"payload\": JSON.stringify(payload)\n  };\n  options.muteHttpExceptions \u003d true;\n  Logger.log(\"API Request Payload: \" + JSON.stringify(options.payload));\n  var response \u003d UrlFetchApp.fetch(url, options);\n  Logger.log(\"API Response: \" + response.getContentText());\n\n  return response;\n}\n\n/**\n * @function sendMessage\n * @param {string} messageText - \"Message\"\n * @param {string} channelId - json.channel.id\n * @param {string} slack_token\n * @description 단순 일반 메시지 전송\n */\nfunction sendMessage(messageText, channelId, slack_token) {\n  var messagePayload \u003d {\n    \"channel\": channelId,\n    \"text\": messageText,\n    \"mrkdwn\": true\n  };\n  slackApiRequest(\"https://slack.com/api/chat.postMessage\", messagePayload, slack_token);\n}\n\n/**\n * @function sendThreadedMessage\n * @param {string} messageText - \"Message\"\n * @param {string} channelId - json.channel.id\n * @param {string} channelId - parentMessageTs\n * @param {string} slack_token\n * @description 특정 메시지의 쓰레드 달기\n */\nfunction sendThreadedMessage(messageText, channelId, parentMessageTs, slack_token) {\n  var messagePayload \u003d {\n    \"channel\": channelId,\n    \"text\": messageText,\n    \"mrkdwn\": true,\n    \"thread_ts\": parentMessageTs  // 특정 메시지의 timestamp를 지정\n  };\n  slackApiRequest(\"https://slack.com/api/chat.postMessage\", messagePayload, slack_token);\n}\n\n\n/**\n * @function sendBlockMessage\n * @param {string} messageText - \"Message\"\n * @param {string} channelId - json.channel.id\n * @param {Object} blocks - JSON\n * @param {string} slack_token\n * @description blocks 메시지 전송\n */\nfunction sendBlockMessage(messageText, channelId, blocks, slack_token) {\n  var messagePayload \u003d {\n    \"channel\": channelId,\n    \"text\": messageText,\n    \"blocks\": blocks\n  };\n  slackApiRequest(\"https://slack.com/api/chat.postMessage\", messagePayload, slack_token);\n}\n\n/**\n * @function updateMessage\n * @param {string} channelId - 메시지가 속한 채널의 ID\n * @param {string} ts - 수정할 메시지의 timestamp\n * @param {string} newText - 새로운 메시지 텍스트\n * @param {string} slack_token - Slack API에 접근할 때 사용되는 토큰\n * @description 기존 메시지를 수정합니다.\n */\nfunction updateMessage(channelId, ts, newText, slack_token) {\n  var updatePayload \u003d {\n    \"channel\": channelId,\n    \"ts\": ts,\n    \"text\": newText\n  };\n\n  var response \u003d slackApiRequest(\"https://slack.com/api/chat.update\", updatePayload, slack_token);\n  return response;\n}\n\n\n\n/**\n * @function openViewModal\n * @param {string} trigger_id - json.trigger_id\n * @param {string} channelId - json.channel.id\n * @param {string} title - \"Hello\"\n * @param {string} blocks - 함수 내에서 JSON.parse 처리\n * @param {string} private_metadata - private_metadata_dataset\n * @param {string} slack_token\n * @description Modal을 열기 위한 함수\n */\nfunction openViewModal(trigger_id, channelId, title, blocks, private_metadata, slack_token) {\n  var openPayload \u003d {\n      \"trigger_id\": trigger_id,\n      \"channel\": channelId,\n      \"view\":{\n        \"type\": \"modal\",\n        \"callback_id\": generateUUID(),\n        \"title\": {\n          \"type\": \"plain_text\",\n          \"text\": title\n        },\n        \"close\": {\n          \"type\": \"plain_text\",\n          \"text\": \"취소\",\n          \"emoji\": true\n        },\n        \"submit\": {\n          \"type\": \"plain_text\",\n          \"text\": \"생성하기\",\n          \"emoji\": true\n        },\n        \"blocks\": JSON.parse(blocks).blocks,\n        \"private_metadata\": private_metadata\n      }\n    };\n  var response \u003d slackApiRequest(\"https://slack.com/api/views.open\", openPayload, slack_token);\n  return response;\n}\n\n\n\n\n/**\n * @function createSlackChannel\n * @param {string} channelName - 채널 이름\n * @param {boolen} is_private - 프라이빗 여부(boolen)\n * @param {string} slack_token\n * @description 채널 생성 함수\n */\nfunction createOpenSlackChannel(channelName, is_private, slack_token) {\n  var url \u003d \u0027https://slack.com/api/conversations.create\u0027;\n  var payload \u003d {\n    \u0027name\u0027: channelName,\n    \u0027is_private\u0027: is_private\n  };\n  \n  // 채널 생성을 위해 Slack API에 요청을 보냄\n  var response \u003d slackApiRequest(url, payload, slack_token);\n  \n  // 응답 파싱\n  var json \u003d JSON.parse(response.getContentText());\n  if (json.ok) {\n    \n    return { id: json.channel.id, name: json.channel.name };  // 생성된 채널의 ID 반환\n  } else {\n    // 다른 오류 발생 시 오류 메시지 반환\n    return json.error;\n  }\n}\n\n\n/**\n * @function getInputDataByName\n * @param {string} response_state - `json.view.state.values`\n * @param {string} action_id - blocks의 input, action_id\n * @return {string or list}\n * @description Modal에서 받은 데이터 가져오기\n */\nfunction getInputDataByName(response_state, action_id){\n\n  for (var key in response_state){\n\n    for (var innerKey in response_state[key]){\n\n      if(action_id \u003d\u003d\u003d innerKey){\n        \n        if (response_state[key][innerKey].type \u003d\u003d\u003d \"plain_text_input\"){\n          // 일반 적인 input\n          return response_state[key][innerKey].value;\n        }else if (response_state[key][innerKey].type \u003d\u003d\u003d \"static_select\"){\n          // static select\n          return response_state[key][innerKey].selected_option.value;\n        }else{\n          // multi select\n          var doc_list \u003d [];\n          for (var i\u003d0; i\u003cresponse_state[key][innerKey].selected_options.length; i++){\n              doc_list.push(response_state[key][innerKey].selected_options[i].value);\n          }\n          return doc_list;\n        }\n      }\n    }\n  }\n\n}\n\n\n/**\n * @function sendEphemeralMessage\n * @param {string} messageText - \"Message\"\n * @param {string} channelId - json.channel.id\n * @param {string} userId - 메시지를 받을 사용자의 ID\n * @param {string} slack_token\n * @description 특정 사용자에게만 보이는 메시지 전송\n */\nfunction sendEphemeralMessage(messageText, channelId, userId, slack_token) {\n  var messagePayload \u003d {\n    \"channel\": channelId,\n    \"text\": messageText,\n    \"user\": userId\n  };\n  slackApiRequest(\"https://slack.com/api/chat.postEphemeral\", messagePayload, slack_token);\n}\n\n\n\n\n"}]}