{"files":[{"id":"de2beac8-0ec3-414c-839f-7bf72227841f","name":"appsscript","type":"json","source":"{\n  \"timeZone\": \"Asia/Seoul\",\n  \"dependencies\": {},\n  \"exceptionLogging\": \"STACKDRIVER\",\n  \"runtimeVersion\": \"V8\"\n}"},{"id":"f5d3bc95-7382-46c2-a79a-617800a805a4","name":"Code","type":"server_js","source":"/**\n * @function getParentFolder\n * @param {string} name - 폴더명\n * @return {Folder or null} - Folder object 또는 null 반환\n * @description 폴더 이름을 넣으면 해당 폴더 이름의 FolderIterator 를 반환\n */\nfunction getParentFolder(name){\n  var parentFolder \u003d DriveApp.getFoldersByName(name); // FolderIterator\n  if (parentFolder.hasNext()) {\n    return parentFolder;\n  }else{\n    return null;\n  }\n}\n\n/**\n * @function createSubFolder\n * @param {string} folder - 신규 프로젝트 폴더가 들어갈 부모 폴더 명\n * @param {string} department - 담당 부서명: SW개발,마케팅,디자인,미디어\n * @param {string} project_name - 신규 프로젝트 명\n * @return {string or null} - 새로 생성된 folder의 id 값을 반환\n * @description root가 되는 Folder Object와 새로운 폴더 이름을 넣으면 새로운 폴더의 id값을 반환, 없으면 null\n */\nfunction createSubFolder(folder, department, project_name){\n  var parentFolder \u003d getParentFolder(folder); // FolderIterator\n  if (parentFolder.hasNext()) {\n    var parent \u003d parentFolder.next();\n    // 이미 있는 폴더 명인지?\n    var exist_folder \u003d parent.getFoldersByName(project_name).hasNext();\n    if (exist_folder) {\n      return parent.getFoldersByName(project_name).next().getId();\n    } else {\n      var newFolder \u003d parent.createFolder(project_name);\n      return newFolder.getId();\n    }\n  } else {\n    return null\n  }  \n}\n// function createSubFolder(folder, project_name){\n//   var parentFolder \u003d getParentFolder(folder); // FolderIterator\n//   if(parentFolder.hasNext()){\n//     // 이미 있는 폴더 명인지?\n//     var exist_folder \u003d parentFolder.next().getFoldersByName(project_name).hasNext();\n//     if(exist_folder){\n//       return DriveApp.getFoldersByName(project_name).next().getId();\n//     }else{\n//       var newFolder \u003d parentFolder.next().createFolder(project_name);\n//       return newFolder.getId();\n//     }\n//   }else{\n//     return null\n//   }  \n// }\n\n\n/**\n * @function copyFileToFolder\n * @param {string} doc_folder - 정량서류가 있는 폴더명\n * @param {string} file_name - 정량서류 파일명\n * @param {string} project_name - 프로젝트 폴더명\n * @return {string or null} - 카피한 파일의 id 값을 반환\n * @description file_name 과 생성한 폴더의 id 값 입력 시, 해당 폴더에 file_name+project_folder_name 으로 저장, 해당 파일 id 값 반환\n */\nfunction copyFileToFolder(doc_folder ,file_name, project_name, department){\n  var docsFolderId \u003d DriveApp.getFoldersByName(doc_folder).next().getId();\n  var search_files \u003d DriveApp.searchFiles(\u0027title contains \"\u0027 + file_name + \u0027\" and \"\u0027 + docsFolderId + \u0027\" in parents\u0027);\n\n  // 프로젝트 폴더 내 정량서류 모으기\n  Logger.log(project_name);\n  var getOrCreateDocsFolder \u003d createSubFolder(project_name, department, \"루와콘텐츠그룹_정량서류\");\n  const destination \u003d DriveApp.getFolderById(getOrCreateDocsFolder);\n\n  if(search_files.hasNext()){\n    var file \u003d search_files.next();\n    const copiedFile \u003d file.makeCopy(\n      \"[\"+project_name+\"]_\"+file_name + \"_루와콘텐츠그룹\", destination\n    );\n    return copiedFile.getId();\n  }else{\n\n    return null;\n  }\n}\n\n/**\n * @function findFileIdInFolder\n * @param {string} fileName - 찾을 파일 이름\n * @param {string} folderName - 찾을 폴더 이름\n * @return {string or null} - 파일의 id 값을 반환 or null \n * @description 특정 폴더 내에서 파일 찾기 (파일명에 특정 키워드 포함)\n */\nfunction findFileIdInFolder(fileName, folderName) {\n  // 특정 폴더 찾기\n  var folder \u003d findFolderByName(folderName);\n  \n  // 특정 폴더가 없으면 null 반환\n  if (!folder) {\n    return null;\n  }\n\n  var files \u003d folder.getFiles();\n  while (files.hasNext()) {\n    var file \u003d files.next();\n    var checkfileName \u003d file.getName();\n\n    // 파일명에 키워드가 포함되어 있는 경우 파일 ID 반환\n    if (checkfileName.includes(fileName)) {\n      return file.getId();\n    }\n  }\n  // 키워드를 포함한 파일을 찾지 못한 경우 null 반환\n  return null;\n  \n}\n\n/**\n * @function findFolderByName\n * @param {string} folderName - 찾을 폴더 이름\n * @return {string or null} - 폴더 id 값을 반환 or null \n * @description 폴더 이름으로 폴더 ID를 찾는 함수\n */\nfunction findFolderByName(folderName) {\n  var folders \u003d DriveApp.getFoldersByName(folderName);\n  if (folders.hasNext()) {\n    return folders.next();\n  }\n  return null;\n}\n\n/**\n * @function createZipInFolder\n * @param {string} fileName - 찾을 파일 이름\n * @param {string} folderName - 찾을 폴더 이름\n * @param {string} zipFolder - 압축 파일이 저장될 폴더 이름\n * @param {string} zipFileName - 압축 파일 이름\n * @return {zipFile} - zipFile 객체\n * @description 특정 폴더에서 파일을 찾아 압축 파일 생성하는 함수\n */\nfunction createZipInFolder(fileNames, folderName, zipFolder, zipFileName) {\n  // 특정 폴더에서 파일 찾아 Blob 배열 생성\n  var blobArray \u003d fileNames.map(function(fileName) {\n    var fileId \u003d findFileIdInFolder(fileName, folderName);\n    if (fileId) {\n      // Blob 생성할 때 확장자 추가\n      var file \u003d DriveApp.getFileById(fileId);\n      var blob \u003d file.getBlob();\n      var fileNameWithExtension \u003d file.getName() + \".\" + file.getFileExtension();\n      return blob.setName(fileNameWithExtension);\n    }\n    return null;\n  }).filter(Boolean);\n\n  // 압축 파일을 생성할 폴더 찾기\n  var folder \u003d findFolderByName(zipFolder);\n\n  // 압축 파일 생성\n  var zipBlob \u003d Utilities.zip(blobArray);\n  var zipFile \u003d folder.createFile(zipBlob.setName(zipFileName));\n\n  return zipFile;\n}\n\n\n\n"}]}